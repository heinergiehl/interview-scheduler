name: CI/CD â€“ Interview Scheduler
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      APP_URL: https://interview-scheduler.heinerdevelops.tech
    steps:
      # 1) Checkout code
      - uses: actions/checkout@v3
      # 2) PHP 8.2 + extensions
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_pgsql, xml, curl, zip
          ini-values: post_max_size=256M, upload_max_filesize=256M
      # 3) Node 20 (for Vite/Inertia)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      # 4) Create .env for CI
      - name: Create CI .env
        run: |
          cp .env.example .env
          php artisan key:generate --force
          cat >> .env <<EOF
          APP_ENV=testing
          APP_KEY=${{ secrets.APP_KEY }}
          APP_URL=${{ env.APP_URL }}
          DB_CONNECTION=pgsql
          DB_HOST=127.0.0.1
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          QUEUE_CONNECTION=database
          SESSION_DRIVER=cookie
          VITE_APP_URL=${{ env.APP_URL }}
          EOF
      # 5) Cache & install PHP deps
      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
      - name: Install Composer deps
        run: composer install --no-dev --prefer-dist --optimize-autoloader
      # 6) Cache & install JS deps, build assets
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install NPM deps
        run: npm ci
      - name: Build front-end
        run: npm run build
      # 7) Run tests
      - name: PHPUnit
        run: php artisan test --env=testing --no-interaction
  deploy:
    name: Deploy to VPS
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout full history (needed for reset)
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # 2) Load SSH key into agent
      - name: SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      # 3) Deploy script
      - name: SSH & deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd /var/www/interview-scheduler
            # A) Ensure shared/.env exists (only first run copies example)
            mkdir -p shared
            if [ ! -f shared/.env ]; then
              cp .env.example shared/.env
              echo "ðŸ‘‰ Edit shared/.env with your production secrets"
            fi
            ln -sf shared/.env .env
            # B) Ensure database container
            docker compose up -d db
            # C) Pull latest code
            git fetch --all
            git reset --hard origin/master
            # D) Install & build on server
            composer install --no-dev --optimize-autoloader
            npm ci
            npm run build
            # E) Migrate & cache
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            # F) Reload services
            sudo systemctl reload php8.2-fpm
            sudo systemctl reload nginx
          EOF
